def left_shift(bits, n):
    return (bits << n) & 0xFFFFFFF | (bits >> (28 - n))

def generate_subkeys(initial_key):
    subkeys = []
    left_part = (initial_key >> 28) & 0xFFFFFFF
    right_part = initial_key & 0xFFFFFFF
    
    for i in range(16):
        left_part = left_shift(left_part, 1)
        right_part = left_shift(right_part, 1)
        
        subkey = (left_part << 28) | right_part
        subkeys.append(subkey)
    
    return subkeys

def main():
    initial_key = 0x123456789ABC  # 48-bit initial key
    subkeys = generate_subkeys(initial_key)
    
    for i, subkey in enumerate(subkeys):
        print(f"Subkey {i+1}: {subkey:012X}")

if __name__ == "__main__":
    main()

Subkey 1: 2468ACF13578
Subkey 2: 48D149E26AF1
Subkey 3: 91A283C4D5E3
Subkey 4: 123450789ABC6
Subkey 5: 2468A0F13578C
Subkey 6: 48D140E26AF19
Subkey 7: 91A280C4D5E33
Subkey 8: 123450089ABC67
Subkey 9: 2468A0013578CF
Subkey 10: 48D140026AF19E
Subkey 11: 91A28004D5E33C
Subkey 12: 23450019ABC678
Subkey 13: 468A0023578CF1
Subkey 14: 8D140046AF19E2
Subkey 15: 1A28009D5E33C4
Subkey 16: 3450012ABC6789
64 -bit:-
from Crypto.Cipher import DES
from Crypto.Random import get_random_bytes

def pkcs7_padding(data):
    """Applies PKCS#7 padding."""
    pad_byte = 8 - (len(data) % 8)
    return data + bytes([pad_byte] * pad_byte)

def pkcs7_unpadding(data):
    """Removes PKCS#7 padding."""
    return data[:-data[-1]]

def des_encrypt(plain_text, key):
    """Encrypts given plain_text using DES and the given key."""
    padded_text = pkcs7_padding(plain_text)
    cipher = DES.new(key, DES.MODE_ECB)
    return cipher.encrypt(padded_text)

def des_decrypt(ciphertext, key):
    """Decrypts given ciphertext using DES and the given key."""
    cipher = DES.new(key, DES.MODE_ECB)
    decrypted = cipher.decrypt(ciphertext)
    return pkcs7_unpadding(decrypted)

# Key should be 64 bits, which is 8 bytes, but only 56 bits are used for encryption (the rest are parity bits).
key = get_random_bytes(8)
print(f"Key: {key.hex()}")

# Plain text can be of variable length; padding will make it a multiple of 8 bytes
plain_text = b"Hello, DES!"
print(f"Plain text: {plain_text}")

# Encrypt the plain text
encrypted_text = des_encrypt(plain_text, key)
print(f"Encrypted text: {encrypted_text.hex()}")

# Decrypt the encrypted text
decrypted_text = des_decrypt(encrypted_text, key)
print(f"Decrypted text: {decrypted_text.decode()}")

Key: 07b1a24ddcd1a835
Plain text: b'Hello, DES!'
Encrypted text: a39733583a465a863670073b84b1bbbc
Decrypted text: Hello, DES!
